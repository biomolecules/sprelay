services:
  - docker

# It is not really needed, other than for showing correct language tag in Travis CI build log.
language: cpp

matrix:
  include:
   - compiler: gcc
     env: TRUSTY=1
   - compiler: gcc
   - compiler: clang
     env: CCCOMPILER=/usr/bin/clang-7 CXXCOMPILER=/usr/bin/clang++-7 CPPLINT=1 CLANG_FORMAT=1 CLANG_TIDY="-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
   - compiler: clang
     env: CCCOMPILER=/usr/bin/clang-7 CXXCOMPILER=/usr/bin/clang++-7 COVERAGE=1 LLVM_PROFILE_BINARY=/usr/bin/llvm-profdata-7 LLVM_COV_BINARY=/usr/bin/llvm-cov-7
   - compiler: clang
     env: CCCOMPILER=/usr/bin/clang-7 CXXCOMPILER=/usr/bin/clang++-7 ADDRESS_SANITIZE=1
   - compiler: clang
     env: CCCOMPILER=/usr/bin/clang-7 CXXCOMPILER=/usr/bin/clang++-7 THREAD_SANITIZE=1
   - compiler: clang
     env: CCCOMPILER=/usr/bin/clang-7 CXXCOMPILER=/usr/bin/clang++-7 UB_SANITIZE=1

# disable the default submodule logic
git:
  submodules: false

#addons:
#  apt:
#    sources:
#      # Qt 5.4.2
#      - sourceline: 'ppa:beineri/opt-qt542-trusty'
#      # cmake3
#      - ubuntu-toolchain-r-test
#    packages:
#      - qt54serialport
#      - qt54tools
#      - cmake

before_install:
  - git submodule update --init --recursive
  - if [[ ! -z "${TRUSTY}" ]]; then
      docker run -d --name ci -v $(pwd):/home/travis/build/$TRAVIS_REPO_SLUG ubuntu:trusty tail -f /dev/null;
    else
      docker run -d --name ci -v $(pwd):/home/travis/build/$TRAVIS_REPO_SLUG ubuntu:bionic tail -f /dev/null;
    fi
  - docker ps
#  - sudo add-apt-repository --yes ppa:beineri/opt-qt542-trusty
#  - sudo add-apt-repository --yes ppa:george-edison55/cmake-3.x
#  - sudo apt-get update -qq

install:
#  - sudo apt-get -y install qt54serialport qt54tools

  # install packages
  # Qt 5.9.5 has data race detected by thread sanitizer in QTest::qExec() so we must install a newer version.
  - if [[ ! -z "${TRUSTY}" ]]; then
      docker exec -t ci bash -c "apt update;
      apt install -y software-properties-common;
      add-apt-repository --yes ppa:beineri/opt-qt542-trusty;
      apt update -qq";
    elif [[ ! -z "${THREAD_SANITIZE}" ]]; then
      docker exec -t ci bash -c "apt update;
      apt install -y software-properties-common;
      add-apt-repository --yes ppa:beineri/opt-qt-5.11.1-bionic;
      apt update -qq";
    fi
  - docker exec -t ci bash -c "apt update;
    apt install -y build-essential valgrind python wget git"
  - if [[ ! -z "${TRUSTY}" ]]; then
      docker exec -t ci bash -c "apt install -y qt54serialport qt54tools";
    elif [[ ! -z "${THREAD_SANITIZE}" ]]; then
      docker exec -t ci bash -c "apt install -y cmake mesa-common-dev qt511serialport qt511tools";
    else
      docker exec -t ci bash -c "apt install -y cmake qt5-default qtbase5-dev qt5-qmake libqt5serialport5-dev";
    fi

  # install cmake
  - if [[ ! -z "${TRUSTY}" ]]; then
      docker exec -t ci bash -c "cd /home/travis/build &&
        wget http://www.cmake.org/files/v3.3/cmake-3.3.2.tar.gz &&
        tar -xzf cmake-3.3.2.tar.gz && cd cmake-3.3.2 && ./configure > /dev/null && make && make install > /dev/null";
    fi


  # install clang
  - if [[ "${TRAVIS_COMPILER}" == "clang" ]]; then
      docker exec -t ci bash -c "wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -;
        echo \"deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main\" | tee /etc/apt/sources.list.d/clang.list;
        echo \"deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main\" | tee -a /etc/apt/sources.list.d/clang.list;
        apt update;
        apt install -y clang-7 clang-tidy-7 clang-format-7 clang-tools-7 libc++-7-dev";
    fi
  # It is necessary to setup compiler here because the environment variables are reset to defaults by travis-ci at the start.
  - if [[ "${TRAVIS_COMPILER}" == "clang" ]]; then
      export CC=${CCCOMPILER};
      export CXX=${CXXCOMPILER};
    fi

  # print version of the compiler
  - docker exec -t ci bash -c "${CXX} -v"

  # print Qt version of the compiler
  - if [[ ! -z "${TRUSTY}" ]]; then
      docker exec -t ci bash -c "source /opt/qt54/bin/qt54-env.sh && qmake -v";
    elif [[ ! -z "${THREAD_SANITIZE}" ]]; then
      docker exec -t ci bash -c "source /opt/qt511/bin/qt511-env.sh && qmake -v";
    else
      docker exec -t ci bash -c "qmake -v";
    fi

  # print cmake version of the compiler
  - docker exec -t ci bash -c "cmake --version"

# before_script:
# enable graphical window for gui testing
#   - "export DISPLAY=:99.0"
#   - "sh -e /etc/init.d/xvfb start"
#   - sleep 3 # give xvfb some time to start

script:
#  - source /opt/qt54/bin/qt54-env.sh && mkdir -p build && cd build &&
#    cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_STANDALONE=OFF -DSKIP_GUI=ON -DMAKE_TESTS=ON
#  - cmake --build . -- -j2
#  - ctest -V
  # configure the project
  - docker exec -t ci bash -c "mkdir -p /home/travis/build/$TRAVIS_REPO_SLUG/build"
  - if [[ ! -z "${COVERAGE}" ]]; then
      echo "coverage cmake:" &&
      echo "cmake .. -DCMAKE_BUILD_TYPE=Release -DMAKE_TESTS=ON -DENABLE_COVERAGE=ON" &&
      docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG/build && CC=${CC} CXX=${CXX} LLVM_PROFILE_BINARY=${LLVM_PROFILE_BINARY}
        LLVM_COV_BINARY=${LLVM_COV_BINARY} cmake .. -DCMAKE_BUILD_TYPE=Release -DMAKE_TESTS=ON -DENABLE_COVERAGE=ON";
    elif [[ ! -z "${ADDRESS_SANITIZE}" ]]; then
      echo "asan cmake:" &&
      echo "cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG=\"-O1 -g\" -DMAKE_TESTS=ON -DADDRESS_SANITIZE=ON" &&
      docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG/build && CC=${CC} CXX=${CXX}
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG=\"-O1 -g\" -DMAKE_TESTS=ON -DADDRESS_SANITIZE=ON";
    elif [[ ! -z "${THREAD_SANITIZE}" ]]; then
      echo "tsan cmake:" &&
      echo "cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG=\"-O1 -g\" -DMAKE_TESTS=ON -DTHREAD_SANITIZE=ON" &&
      docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG/build && CC=${CC} CXX=${CXX}
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG=\"-O1 -g\" -DMAKE_TESTS=ON -DTHREAD_SANITIZE=ON -DCMAKE_PREFIX_PATH=/opt/qt511";
    elif [[ ! -z "${UB_SANITIZE}" ]]; then
      echo "ubsan cmake:" &&
      echo "cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG=\"-O1 -g\" -DENUM_FLAGS_MAKE_TESTS=ON -DUB_SANITIZE=ON" &&
      docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG/build && CC=${CC} CXX=${CXX}
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG=\"-O1 -g\" -DMAKE_TESTS=ON -DUB_SANITIZE=ON";
    else
      echo "normal cmake:" &&
      echo "cmake .. -DCMAKE_BUILD_TYPE=Release -DMAKE_TESTS=ON" &&
      if [[ ! -z "${TRUSTY}" ]]; then
        docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG/build && CC=${CC} CXX=${CXX}
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMAKE_TESTS=ON -DCMAKE_PREFIX_PATH=/opt/qt54";
      else
        docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG/build && CC=${CC} CXX=${CXX}
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMAKE_TESTS=ON ${CLANG_TIDY}";
      fi;
    fi
  # build the project
  - docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG/build && cmake --build . -- -j2"
  # run tests
  - if [[ ! -z "${COVERAGE}" ]]; then
      docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG/build && cmake --build . --target coverage";
    else
      docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG/build && ctest -V";
    fi
  - if [[ ! -z "${CPPLINT}" ]]; then
      docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG &&
        python external/cpplint-1.3.0/cpplint.py --extensions=cpp,h,tpp --headers=h,tpp --recursive src/biomolecules/sprelay tests/biomolecules/sprelay";
    fi
  - if [[ ! -z "${CLANG_FORMAT}" ]]; then
      docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG && clang-format-7 -i \$(find src/biomolecules/sprelay tests/biomolecules/sprelay -name *.h -o -name *.cpp -o -name *.tpp | tr \"\\n\" \" \") && git diff --exit-code || (echo \"Code was not formatted using clang-format!\"; false)";
    fi
  - if [[ ! -z "${CLANG_TIDY}" ]]; then
      docker exec -t ci bash -c "cd /home/travis/build/$TRAVIS_REPO_SLUG && run-clang-tidy-7 -p build -header-filter='.*(src|tests)/biomolecules/sprelay/.*'";
    fi

after_success:
  # report coverage
  - if [[ ! -z "${COVERAGE}" ]]; then
      bash <(curl -s https://codecov.io/bash);
    fi
